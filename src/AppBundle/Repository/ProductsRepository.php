<?php

namespace AppBundle\Repository;

/**
 * productsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductsRepository extends \Doctrine\ORM\EntityRepository
{



    public function selectAll(int $firstresults,int $maxresults)
    {


        $results = $this->createQueryBuilder('p')
                        ->select('p.id','t.type','t.imgtype','p.quantityInStock','p.year','p.productImage','p.productName',
                                        'p.salePrice','p.productDescription','a.area','p.productCountry','p.slug')
                        ->innerJoin('p.winetype','t')
                        ->innerJoin('p.winearea','a')
                        ->setFirstResult($firstresults)
                        ->setMaxResults($maxresults)
                        ->getQuery()
                        ->getResult();


        return $results;

    }


    public function countProducts(){


        $results = $this->createQueryBuilder('p')
                        ->select('count(p.id)')
                        ->getQuery()
                        ->getResult();


        return $results;

    }


    public function orderPrice (string $choice)
    {

        $results = $this->createQueryBuilder('p')
                        ->select('p.year','p.productImage','p.productName',
                                'p.salePrice','p.productDescription','a.area','p.productCountry')
                        ->innerJoin('p.winearea','a')
                        ->orderBy('p.salePrice',$choice)
                        ->getQuery()
                        ->getResult();
        return $results;

    }



    public function findCountry()
    {

        $country = $this->createQueryBuilder('p')
                          ->select('p.productCountry')
                          ->distinct()
                          ->getQuery()
                          ->getResult();
        return $country;

    }

/********************************************
Récupérer les années par ordre chronologique
********************************************/

    public function findYear()
    {
        $year = $this->createQueryBuilder('p')
                     ->select('p.year')
                     ->distinct()
                     ->orderBy('p.year','ASC')
                     ->getQuery()
                     ->getResult();

        return $year;

    }


/*********************************************************
Récupérer le nom d'un produit par son nom contenant 'xxxx'
**********************************************************/
    public function searchProducts(string $name)
    {

        $results = $this->createQueryBuilder('products')
                        ->select('products.productName')
                        ->where('products.productName LIKE :name')
                        ->setParameter('name', '%'.$name.'%')
                        ->getQuery()
                        ->getResult();
        return $results;

    }


/***********************************************************************
Récupérer la liste des produits correspondant à une ou plusieurs régions
************************************************************************/
    public function searchAera(array $aera)
    {

        $results = $this->createQueryBuilder('p')
                        ->select('p.id','t.type','t.imgtype','p.quantityInStock','p.year','p.productImage','p.productName',
                        'p.salePrice','p.productDescription','p.slug','a.area','p.productCountry')
                        ->innerJoin('p.winetype','t')
                        ->innerJoin('p.winearea','a')
                        ->where('a.area IN (:area)')
                        ->setParameter('area',$aera)
                        ->distinct()
                        ->getQuery()
                        ->getResult();
        return $results;

    }


/***********************************************************************
Récupérer la liste des produits correspondant à un ou plusieurs pays
************************************************************************/

    public function searchCountry(array $choice)
    {

        $results = $this->createQueryBuilder('p')
                        ->select('p.id','t.type','t.imgtype','p.quantityInStock','p.year','p.productImage','p.productName',
                                 'p.salePrice','p.productDescription','a.area','p.productCountry','p.slug')
                         ->innerJoin('p.winetype','t')
                         ->innerJoin('p.winearea','a')
                         ->where('p.productCountry IN (:country)')
                         ->setParameter('country',$choice)
                         ->getQuery()
                         ->getResult();

        return $results;

    }

/***********************************************************************
Récupérer la liste des régions à un ou plusieurs pays
************************************************************************/

    public function filterAera(array $choice)
    {

        $results = $this->createQueryBuilder('p')
                        ->select('a.area')
                        ->innerJoin('p.winearea','a')
                        ->where('p.productCountry IN (:country)')
                        ->setParameter('country',$choice)
                        ->distinct()
                        ->getQuery()
                        ->getResult();

        return $results;

    }

/************************************
Récupérer la liste de toutes les régions
************************************/

    public function displayAera()
    {
        $results = $this->createQueryBuilder('p')
                        ->select('a.area')
                        ->innerJoin('p.winearea','a')
                        ->distinct()
                        ->getQuery()
                        ->getResult();

        return $results;

    }



/******************************************************
Récupérer le détails d'un produit à partir de son slug
******************************************************/

    public function selectAllBySlug(string $slug)
    {

        $results = $this->createQueryBuilder('p')
                        ->select('p.id','t.type','p.quantityInStock','p.year','p.productImage','p.productName',
                                        'p.salePrice','p.productDescription','a.area','p.productCountry','p.slug')
                        ->innerJoin('p.winetype','t')
                        ->innerJoin('p.winearea','a')
                        ->where('p.slug = :slug')
                        ->setParameter('slug',$slug)
                        ->getQuery()
                        ->getResult();

        return $results;

    }

/***************************************************************************
Récupérer la liste des produits correspondant à un ou plusieurs types de vin
****************************************************************************/

    public function displayByType(array $winetype){

        // Build Query
        $results = $this->createQueryBuilder('p')
                        ->select('p.id','t.type','t.imgtype','p.quantityInStock','p.year','p.productImage','p.productName',
                                        'p.salePrice','p.productDescription','a.area','p.productCountry','p.slug')
                        ->innerJoin('p.winetype','t')
                        ->innerJoin('p.winearea','a')
                        ->where('t.type  IN (:type)')
                        ->setParameter('type',$winetype)
                        ->getQuery()
                        ->getResult();

        return $results;

    }



    public function displayTypeByCountry(array $winetype, array $countrytype){

        $results = $this->createQueryBuilder('p')
                        ->select('p.id','t.type','t.imgtype','p.quantityInStock','p.year','p.productImage','p.productName',
                                        'p.salePrice','p.productDescription','a.area','p.productCountry','p.slug')
                        ->innerJoin('p.winetype','t')
                        ->innerJoin('p.winearea','a')
                        ->where('t.type  IN (:type)')
                        ->andWhere('p.productCountry IN (:country)')
                        ->setParameters(['type'=>$winetype,'country'=>$countrytype])
                        ->getQuery()
                        ->getResult();

        return $results;

    }

    public function displayTypeByLowPrice(array $winetype, int $price ){

        $results = $this->createQueryBuilder('p')
                        ->select('p.id','t.type','t.imgtype','p.quantityInStock','p.year','p.productImage','p.productName',
                        'p.salePrice','p.productDescription','a.area','p.productCountry','p.slug')
                        ->innerJoin('p.winetype','t')
                        ->innerJoin('p.winearea','a')
                        ->where('t.type IN(:type)')
                        ->andWhere('p.salePrice <= :price')
                        ->setParameters(['type'=>$winetype,'price'=>$price])
                        ->orderBy('p.salePrice','ASC')
                        ->getQuery()
                        ->getResult();

        return $results;

    }


    public function displayTypeByHighPrice(array $winetype, int $price ){

        $results = $this->createQueryBuilder('p')
            ->select('p.id','t.type','t.imgtype','p.quantityInStock','p.year','p.productImage','p.productName',
                'p.salePrice','p.productDescription','a.area','p.productCountry','p.slug')
            ->innerJoin('p.winetype','t')
            ->innerJoin('p.winearea','a')
            ->where('t.type IN(:type)')
            ->andWhere('p.salePrice >= :price')
            ->setParameters(['type'=>$winetype,'price'=>$price])
            ->orderBy('p.salePrice','ASC')
            ->getQuery()
            ->getResult();

        return $results;

    }


    public function displayTypeByPrice(array $winetype, array $price){

        $results = $this->createQueryBuilder('p')
                        ->select('p.id','t.type','t.imgtype','p.quantityInStock','p.year','p.productImage','p.productName',
                                        'p.salePrice','p.productDescription','a.area','p.productCountry','p.slug')
                        ->innerJoin('p.winetype','t')
                        ->innerJoin('p.winearea','a')
                        ->where('t.type IN (:type)')
                        ->andWhere('p.salePrice BETWEEN :price1 AND :price2')
                        ->setParameters(['type'=>$winetype,'price1'=>$price[0],'price2'=>$price[1]])
                        ->orderBy('p.salePrice','ASC')
                        ->getQuery()
                        ->getResult();

        return $results;

    }


    public function displayByAeraType(array $winetype,array $wineaera){

        $results = $this->createQueryBuilder('p')
                        ->select('p.id','t.type','t.imgtype','p.quantityInStock','p.year','p.productImage','p.productName',
                                       'p.salePrice','p.productDescription','p.slug','a.area','p.productCountry','p.slug')
                        ->innerJoin('p.winetype','t')
                        ->innerJoin('p.winearea','a')
                        ->where('t.type  IN (:type)')
                        ->andWhere('a.area IN (:area)')
                        ->setParameters(['type'=>$winetype,'area'=>$wineaera])
                        ->getQuery()
                        ->getResult();

        return $results;


    }



    public function displayTypeByPriceArea(array $winetype, array $area,array $price){

        $results = $this->createQueryBuilder('p')
                        ->select('p.id','t.type','t.imgtype','p.quantityInStock','p.year','p.productImage',
                                       'p.productName', 'p.salePrice','p.productDescription','p.slug','a.area','p.productCountry','p.slug')
                        ->innerJoin('p.winetype','t')
                        ->innerJoin('p.winearea','a')
                        ->where('p.winetype IN (:type)')
                        ->andWhere('p.winearea IN (:area)')
                        ->setParameters(['type'=>$winetype,'area'])
                        ->getQuery()
                        ->getResult();





    }


    public function displayAreaBytype(array $winetype)
    {

        $results = $this->createQueryBuilder('p')
                        ->select('a.area')
                        ->innerJoin('p.winetype','t')
                        ->innerJoin('p.winearea','a')
                        ->where('t.type IN (:type)')
                        ->setParameter('type',$winetype)
                        ->distinct()
                        ->getQuery()
                        ->getResult();
        return $results;

    }


    public function displayTypeByArea(array $winetype)
    {
        $results =$this->createQueryBuilder('p')
                       ->select('t.type','t.imgtype')
                       ->innerJoin('p.winetype','t')
                       ->innerJoin('p.winearea','a')
                       ->where('a.area IN (:area)')
                       ->setParameter('area',$winetype)
                       ->distinct()
                       ->getQuery()
                       ->getResult();


        return $results;


    }

    public function selectQtyByType(){

        $area = 'bourgogne';

        $results = $this->createQueryBuilder('p')
                        ->innerJoin('p.winetype','t')
                        ->innerJoin('p.winearea','a')
                        ->select('a.area','t.type','count(p.winetype)')
                        ->where('a.area IN (:area)')
                        ->setParameter('area',$area)
                        ->groupBy('t.type')
                        ->getQuery()
                        ->getResult();


        return $results;
    }


    public function displayByMinPrice(int $price){



            $results = $this->createQueryBuilder('p')
                            ->select('p.id','t.type', 't.imgtype', 'p.quantityInStock', 'p.year', 'p.productImage', 'p.productName',
                                'p.salePrice', 'p.productDescription', 'p.slug', 'a.area', 'p.productCountry', 'p.slug')
                            ->innerJoin('p.winearea', 'a')
                            ->innerJoin('p.winetype', 't')
                            ->where('p.salePrice <= :price')
                            ->setParameter('price',$price)
                            ->orderBy('p.salePrice','ASC')
                            ->getQuery()
                            ->getResult();



            return $results;

    }


    public function displayByMaxPrice(int $price){


        //exit(dump($price));

        $results = $this->createQueryBuilder('p')
            ->select('p.id','t.type', 't.imgtype', 'p.quantityInStock', 'p.year', 'p.productImage', 'p.productName',
                'p.salePrice', 'p.productDescription', 'p.slug', 'a.area', 'p.productCountry', 'p.slug')
            ->innerJoin('p.winearea', 'a')
            ->innerJoin('p.winetype', 't')
            ->where('p.salePrice >= :price')
            ->setParameter('price',$price)
            ->orderBy('p.salePrice','ASC')
            ->getQuery()
            ->getResult();

        // exit(dump($results));

        return $results;

    }


    public function displayByPriceRange( array $price){

            $results = $this->createQueryBuilder('p')
                            ->select('p.id','t.type', 't.imgtype', 'p.quantityInStock', 'p.year', 'p.productImage', 'p.productName',
                                'p.salePrice', 'p.productDescription', 'p.slug', 'a.area', 'p.productCountry', 'p.slug')
                            ->innerJoin('p.winearea', 'a')
                            ->innerJoin('p.winetype', 't')
                            ->where('p.salePrice BETWEEN :price1 AND :price2')
                            ->setParameters(['price1'=>$price[0],'price2'=>$price[1]])
                            ->orderBy('p.salePrice','ASC')
                            ->getQuery()
                            ->getResult();

        // exit(dump($results));

        return $results;


    }

    public function displayPriceByType (int $price, array $type, string $operator){

            $results = $this->createQueryBuilder('p')
                            ->select('p.id','t.type', 't.imgtype', 'p.quantityInStock', 'p.year', 'p.productImage', 'p.productName',
                                        'p.salePrice', 'p.productDescription', 'p.slug', 'a.area', 'p.productCountry', 'p.slug')
                            ->innerJoin('p.winearea','a')
                            ->innerJoin('p.winetype','t')
                            ->where('p.salePrice'.$operator.' :price')
                            ->andWhere('t.type IN (:type)')
                            ->setParameters(['price'=>$price,'type'=>$type])
                            ->orderBy('p.salePrice','ASC')
                            ->getQuery()
                            ->getResult();

            return $results;
    }


    public function displayByOnePrice(int $price, string $operator){

            $results = $this->createQueryBuilder('p')
                            ->select('p.id','t.type', 't.imgtype', 'p.quantityInStock', 'p.year', 'p.productImage', 'p.productName',
                                        'p.salePrice', 'p.productDescription', 'p.slug', 'a.area', 'p.productCountry', 'p.slug')
                            ->innerJoin('p.winearea','a')
                            ->innerJoin('p.winetype','t')
                            ->where('p.salePrice'.$operator.' :price')
                            ->setParameter('price',$price)
                            ->orderBy('p.salePrice','ASC')
                            ->getQuery()
                            ->getResult();

            return $results;


    }



    public function displayByTwoPrice(array $price){


        //exit(dump($price));

            $results = $this->createQueryBuilder('p')
                             ->select('p.id','t.type', 't.imgtype', 'p.quantityInStock', 'p.year', 'p.productImage', 'p.productName',
                                    'p.salePrice', 'p.productDescription', 'p.slug', 'a.area', 'p.productCountry', 'p.slug')
                            ->innerJoin('p.winearea','a')
                            ->innerJoin('p.winetype','t')
                            ->where('p.salePrice <= :minprice')
                            ->orWhere('p.salePrice >= :maxprice')
                            ->setParameters(['minprice'=>$price[0], 'maxprice'=>$price[1]])
                            ->orderBy('p.salePrice','ASC')
                            ->getQuery()
                            ->getResult();

            return $results;
    }

}
